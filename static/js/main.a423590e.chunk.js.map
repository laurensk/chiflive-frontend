{"version":3,"sources":["models/LiveEvent.ts","models/Message.ts","models/User.ts","utils/StorageUtils.ts","api/ApiError.model.ts","api/ApiSuccess.model.ts","api/ApiRequest.ts","api/ApiService.ts","pages/home/Home.tsx","pages/admin/Admin.tsx","App.tsx","index.tsx"],"names":["LiveEvent","isLiveEvent","this","Message","id","author","body","creationDate","read","User","name","login","StorageUtils","username","password","localStorage","setItem","removeItem","getItem","loginData","getLoginData","length","ApiError","message","statusCode","ApiSuccess","succes","success","ApiRequest","response","parseType","isArray","callback","rawData","Object","values","data","error","undefined","apiError","path","auth","reqUrl","apiEndpoint","reqBody","Axios","get","then","res","responseHandler","catch","err","errorHandler","post","delete","ApiService","messages","messageId","console","log","liveEvent","user","Home","props","liveEventInterval","state","getAuthorName","updateLiveEvent","setInterval","clearInterval","getLiveEvent","setState","event","preventDefault","postMessage","alert","saveAuthorName","target","value","className","onSubmit","sendMessage","placeholder","type","onChange","authorChanged","bodyChanged","React","Component","Admin","interval","adminLiveEventInterval","isLoggedIn","sec","getMessages","document","style","backgroundImage","toggleLiveEvent","now","getAllMessages","sortMessages","sort","x","y","Number","getName","onClick","textDecoration","cursor","marginTop","logout","map","renderMessage","toggleReadStatus","deleteMessage","opacity","toogleRead","renderAdmin","renderLogin","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a423590e.chunk.js","sourcesContent":["export class LiveEvent {\n  isLiveEvent: boolean;\n\n  constructor(isLiveEvent: boolean) {\n    this.isLiveEvent = isLiveEvent;\n  }\n}\n","export class Message {\n  id: number;\n  author: string;\n  body: string;\n  creationDate: number;\n  read: boolean;\n\n  constructor(id: number, author: string, body: string, creationDate: number, read: boolean) {\n    this.id = id;\n    this.author = author;\n    this.body = body;\n    this.creationDate = creationDate;\n    this.read = read;\n  }\n}\n","export class User {\n  id: number;\n  name: string;\n  login: string;\n\n  constructor(id: number, name: string, login: string) {\n    this.id = id;\n    this.name = name;\n    this.login = login;\n  }\n}\n","export class StorageUtils {\n  public static login(username: string, password: string, name: string) {\n    localStorage.setItem(\"CL_API_USERNAME\", username);\n    localStorage.setItem(\"CL_API_TOKEN\", password);\n    localStorage.setItem(\"CL_API_NAME\", name);\n  }\n\n  public static logout() {\n    localStorage.removeItem(\"CL_API_USERNAME\");\n    localStorage.removeItem(\"CL_API_TOKEN\");\n    localStorage.removeItem(\"CL_API_NAME\");\n  }\n\n  public static getLoginData() {\n    const loginData: { username: string; password: string } = {\n      username: localStorage.getItem(\"CL_API_USERNAME\") || \"\",\n      password: localStorage.getItem(\"CL_API_TOKEN\") || \"\",\n    };\n    return loginData;\n  }\n\n  public static getName() {\n    return localStorage.getItem(\"CL_API_NAME\");\n  }\n\n  public static isLoggedIn() {\n    const loginData = StorageUtils.getLoginData();\n    return loginData.username.length >= 1 || loginData.password.length >= 1;\n  }\n\n  public static saveAuthorName(author: string) {\n    localStorage.setItem(\"CL_API_AUTHOR\", author);\n  }\n\n  public static getAuthorName() {\n    return localStorage.getItem(\"CL_API_AUTHOR\") || \"\";\n  }\n}\n","export class ApiError {\n  message: string;\n  statusCode: number;\n\n  constructor(message: string, statusCode: number) {\n    this.message = message;\n    this.statusCode = statusCode;\n  }\n}\n","export class ApiSuccess {\n  success: boolean;\n\n  constructor(succes: boolean) {\n    this.success = succes;\n  }\n}\n","import Axios, { AxiosResponse } from \"axios\";\nimport { ApiError } from \"./ApiError.model\";\nimport { ApiSuccess } from \"./ApiSuccess.model\";\nimport { StorageUtils } from \"../utils/StorageUtils\";\n\nexport class ApiRequest {\n  static apiEndpoint: string = \"https://chiflive.api.laurensk.at\";\n\n  static async responseHandler(response: AxiosResponse<any>, parseType: any, isArray: boolean, callback: Function) {\n    const rawData = Object.values(response.data)[0];\n    const data = isArray ? (rawData as typeof parseType) : (rawData as typeof parseType[]);\n    callback(data, null);\n  }\n\n  static async errorHandler(error: any, callback: Function) {\n    if (!error || !error.response || !error.response.data) return callback(null, new ApiError(\"UNKNOWN_ERROR\", 400));\n    if (error.response.data.error.message != undefined) {\n      const statusCode: number = error.response.data.error.statusCode;\n      const message: string = error.response.data.error.message;\n      const apiError = new ApiError(message, statusCode);\n      return callback(null, apiError);\n    } else {\n      const apiError = new ApiError(\"UNKNOWN_ERROR\", 400);\n      return callback(null, apiError);\n    }\n  }\n\n  static async get(path: string, body: object, parseType: any, isArray: boolean, auth: boolean, callback: Function) {\n    const reqUrl = this.apiEndpoint + path;\n    const reqBody: Object = auth ? { ...StorageUtils.getLoginData(), ...body } : body;\n    Axios.get(reqUrl, { data: reqBody })\n      .then((res) => this.responseHandler(res, parseType, isArray, callback))\n      .catch((err) => this.errorHandler(err, callback));\n  }\n\n  static async post(path: string, body: object, parseType: any, isArray: boolean, auth: boolean, callback: Function) {\n    const reqUrl = this.apiEndpoint + path;\n    const reqBody: Object = auth ? { ...StorageUtils.getLoginData(), ...body } : body;\n    Axios.post(reqUrl, reqBody)\n      .then((res) => this.responseHandler(res, parseType, isArray, callback))\n      .catch((err) => this.errorHandler(err, callback));\n  }\n\n  static async delete(path: string, body: object, auth: boolean, callback: Function) {\n    const reqUrl = this.apiEndpoint + path;\n    const reqBody: Object = auth ? { ...StorageUtils.getLoginData(), ...body } : body;\n    Axios.delete(reqUrl, { data: reqBody })\n      .then((res) => this.responseHandler(res, ApiSuccess, false, callback))\n      .catch((err) => this.errorHandler(err, callback));\n  }\n}\n","import { LiveEvent } from \"../models/LiveEvent\";\nimport { Message } from \"../models/Message\";\nimport { User } from \"../models/User\";\nimport { StorageUtils } from \"../utils/StorageUtils\";\nimport { ApiRequest } from \"./ApiRequest\";\nimport { ApiSuccess } from \"./ApiSuccess.model\";\n\nexport class ApiService {\n  // Messages\n  static async getAllMessages(callback: Function) {\n    ApiRequest.post(\"/messages/get\", {}, Message, true, true, (messages: Message[], error: ApiService) => {\n      callback(messages, error);\n    });\n  }\n\n  static async deleteMessage(messageId: number, callback: Function) {\n    ApiRequest.post(\n      \"/messages/delete\",\n      { messageId: messageId },\n      ApiSuccess,\n      false,\n      true,\n      (success: ApiSuccess, error: ApiService) => {\n        callback(success, error);\n      }\n    );\n  }\n\n  static async toggleReadStatus(messageId: number, callback: Function) {\n    ApiRequest.post(\n      \"/messages/toggleReadStatus\",\n      { messageId: messageId },\n      ApiSuccess,\n      false,\n      true,\n      (success: ApiSuccess, error: ApiService) => {\n        callback(success, error);\n      }\n    );\n  }\n\n  static async postMessage(author: string, body: string, callback: Function) {\n    ApiRequest.post(\n      \"/messages\",\n      { author: author, body: body },\n      ApiSuccess,\n      false,\n      false,\n      (success: ApiSuccess, error: ApiService) => {\n        console.log(error);\n        callback(success, error);\n      }\n    );\n  }\n\n  // Properties\n  static async getLiveEvent(callback: Function) {\n    ApiRequest.post(\n      \"/properties/isLiveEvent\",\n      {},\n      LiveEvent,\n      false,\n      false,\n      (liveEvent: LiveEvent, error: ApiService) => {\n        callback(liveEvent, error);\n      }\n    );\n  }\n\n  static async toggleLiveEvent(callback: Function) {\n    ApiRequest.post(\n      \"/properties/toggleLiveEvent\",\n      {},\n      ApiSuccess,\n      false,\n      true,\n      (success: ApiSuccess, error: ApiService) => {\n        callback(success, error);\n      }\n    );\n  }\n\n  // User\n  static async login(username: string, password: string, callback: Function) {\n    ApiRequest.post(\n      \"/user\",\n      { username: username, password: password },\n      User,\n      false,\n      false,\n      (user: User, error: ApiService) => {\n        if (!error) StorageUtils.login(username, password, user.name);\n        callback(user, error);\n      }\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Home.css\";\nimport { ApiError } from \"../../api/ApiError.model\";\nimport { ApiService } from \"../../api/ApiService\";\nimport { ApiSuccess } from \"../../api/ApiSuccess.model\";\nimport { StorageUtils } from \"../../utils/StorageUtils\";\nimport { LiveEvent } from \"../../models/LiveEvent\";\n\ninterface StateType {\n  author: string;\n  body: string;\n  isLiveEvent: boolean;\n}\n\nexport class Home extends React.Component<any, StateType> {\n  liveEventInterval: any;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      author: StorageUtils.getAuthorName(),\n      body: \"\",\n      isLiveEvent: true,\n    };\n  }\n\n  componentDidMount() {\n    this.updateLiveEvent();\n    this.liveEventInterval = setInterval(() => this.updateLiveEvent(), 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.liveEventInterval);\n  }\n\n  updateLiveEvent() {\n    ApiService.getLiveEvent((liveEvent: LiveEvent, error: ApiError) => {\n      if (!error) this.setState({ isLiveEvent: liveEvent.isLiveEvent });\n    });\n  }\n\n  sendMessage(event: any) {\n    event.preventDefault();\n    if (this.state.isLiveEvent) {\n      ApiService.postMessage(this.state.author, this.state.body, (success: ApiSuccess, error: ApiError) => {\n        if (error) return alert(\"Error sending message. Please try again!\");\n        this.setState({ body: \"\" });\n        alert(\"Message sent successfully!\");\n      });\n    } else {\n      alert(\"You can only send messages during a live event. Please come back later!\");\n    }\n  }\n\n  authorChanged(event: any) {\n    StorageUtils.saveAuthorName(event.target.value);\n    this.setState({ author: event.target.value });\n  }\n\n  bodyChanged(event: any) {\n    this.setState({ body: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">CHIFLIVE</h1>\n        <h2 className=\"subtitle\">ADD YOUR COMMENT TO CHIFLIVE NOW!</h2>\n        <div className=\"form-container\">\n          <form className=\"form-element\" onSubmit={(event) => this.sendMessage(event)}>\n            <input\n              className=\"author-input\"\n              placeholder=\"Author (optional)\"\n              type=\"text\"\n              value={this.state.author}\n              onChange={(event) => this.authorChanged(event)}\n            />\n            <textarea\n              className=\"body-input\"\n              placeholder=\"Your Message\"\n              value={this.state.body}\n              onChange={(event) => this.bodyChanged(event)}\n            />\n            <button className=\"button-input\" type=\"submit\">\n              Post Message\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Admin.css\";\nimport { StorageUtils } from \"../../utils/StorageUtils\";\nimport { ApiService } from \"../../api/ApiService\";\nimport { ApiError } from \"../../api/ApiError.model\";\nimport { User } from \"../../models/User\";\nimport { Message } from \"../../models/Message\";\nimport { ApiSuccess } from \"../../api/ApiSuccess.model\";\nimport { LiveEvent } from \"../../models/LiveEvent\";\n\ninterface StateType {\n  isLoggedIn: boolean;\n  username: string;\n  password: string;\n  user: User | undefined;\n  messages: Message[];\n  sec: number;\n  isLiveEvent: boolean;\n}\n\nexport class Admin extends React.Component<any, StateType> {\n  interval: any | undefined;\n  adminLiveEventInterval: any;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isLoggedIn: StorageUtils.isLoggedIn(),\n      username: \"\",\n      password: \"\",\n      user: undefined,\n      messages: [],\n      sec: 5,\n      isLiveEvent: true,\n    };\n  }\n\n  componentDidMount() {\n    this.getMessages(false);\n    document.body.style.backgroundImage = \"none\";\n    this.interval = setInterval(() => this.getMessages(false), 1000);\n    this.updateLiveEvent();\n    this.adminLiveEventInterval = setInterval(() => this.updateLiveEvent(), 10000);\n    //StorageUtils.logout();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.adminLiveEventInterval);\n  }\n\n  updateLiveEvent() {\n    ApiService.getLiveEvent((liveEvent: LiveEvent, error: ApiError) => {\n      if (!error) this.setState({ isLiveEvent: liveEvent.isLiveEvent });\n    });\n  }\n\n  toggleLiveEvent() {\n    ApiService.toggleLiveEvent((success: ApiSuccess, error: ApiError) => {\n      if (!error) this.updateLiveEvent();\n    });\n  }\n\n  login(event: any) {\n    event.preventDefault();\n    ApiService.login(this.state.username, this.state.password, (user: User, error: ApiError) => {\n      if (error) {\n        console.log(error);\n        this.setState({ isLoggedIn: false, password: \"\" });\n        alert(\"Login failed. Please try again!\");\n      } else {\n        this.setState({ user: user, isLoggedIn: StorageUtils.isLoggedIn(), username: \"\", password: \"\" });\n      }\n    });\n  }\n\n  renderLogin() {\n    return (\n      <div className=\"admin-container\">\n        <h1 className=\"admin-title\">CHIFLIVE</h1>\n        <h2 className=\"admin-subtitle\">LOGIN TO MANAGE MESSAGES!</h2>\n        <div className=\"admin-form-container\">\n          <form className=\"admin-form-element\" onSubmit={(event) => this.login(event)}>\n            <input\n              className=\"admin-input\"\n              placeholder=\"Username\"\n              type=\"text\"\n              value={this.state.username}\n              onChange={(event) => this.setState({ username: event.target.value })}\n            />\n            <input\n              className=\"admin-input\"\n              placeholder=\"Password\"\n              type=\"password\"\n              value={this.state.password}\n              onChange={(event) => this.setState({ password: event.target.value })}\n            />\n            <button className=\"admin-button\" type=\"submit\">\n              Login\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  getMessages(now: boolean) {\n    if ((this.state.isLoggedIn && this.state.sec >= 5) || now) {\n      ApiService.getAllMessages((messages: Message[], error: ApiError) => {\n        if (!error) this.setState({ messages: this.sortMessages(messages), sec: 0 });\n      });\n    } else {\n      this.setState({ sec: this.state.sec + 1 });\n    }\n  }\n\n  sortMessages(messages: Message[]) {\n    return messages.sort((x, y) => Number(x.read) - Number(y.read));\n  }\n\n  renderAdmin() {\n    return (\n      <div className=\"admin-container\">\n        <h1 className=\"admin-title\">CHIFLIVE</h1>\n        <h2 className=\"admin-subtitle\">Welcome, {StorageUtils.getName()}</h2>\n        <h2\n          onClick={() => this.toggleLiveEvent()}\n          style={{ textDecoration: \"underline\", cursor: \"pointer\", marginTop: 5 }}\n          className=\"admin-subtitle\"\n        >\n          Turn LiveEvent {this.state.isLiveEvent ? \"OFF\" : \"ON\"}\n        </h2>\n        <h2\n          onClick={() => {\n            StorageUtils.logout();\n            this.setState({ isLoggedIn: false });\n          }}\n          style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n          className=\"admin-subtitle\"\n        >\n          Logout\n        </h2>\n        <div className=\"mes-container\">\n          {this.state.messages.map((message) => {\n            return this.renderMessage(message);\n          })}\n          <div className=\"updated-sec\">Updated {this.state.sec} seconds ago...</div>\n        </div>\n      </div>\n    );\n  }\n\n  toogleRead(message: Message) {\n    ApiService.toggleReadStatus(message.id, (success: ApiSuccess, error: ApiError) => {\n      if (!error) this.getMessages(true);\n    });\n  }\n\n  deleteMessage(message: Message) {\n    ApiService.deleteMessage(message.id, (success: ApiSuccess, error: ApiError) => {\n      if (!error) this.getMessages(true);\n    });\n  }\n\n  renderMessage(message: Message) {\n    return (\n      <div key={message.id} className=\"mes-message-container\" style={message.read ? { opacity: 0.5 } : undefined}>\n        <div className=\"message-detail\">\n          <div className=\"mes-author\">{message.author.length > 0 ? message.author : \"No Author\"}</div>\n          <div className=\"mes-body\">{message.body}</div>\n        </div>\n        <div className=\"admin-buttons\">\n          <button onClick={() => this.toogleRead(message)} className=\"action-button\">\n            {message.read ? \"Mark as Unread\" : \"Mark as Read\"}\n          </button>\n          <button onClick={() => this.deleteMessage(message)} className=\"action-button\">\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isLoggedIn && this.renderAdmin()}\n        {!this.state.isLoggedIn && this.renderLogin()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Home } from \"./pages/home/Home\";\nimport { Admin } from \"./pages/admin/Admin\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/admin\">\n            <Admin />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}